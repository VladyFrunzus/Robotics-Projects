''' Link to robotbenchmark profile: https://robotbenchmark.net/vladimirfrunza

    Performance: 85.34% '''

from controller import Robot
import math as m

# create the Robot instance

robot = Robot()

# Get pointer to each wheel of our robot.

leftWheel = robot.getMotor('left wheel')
rightWheel = robot.getMotor('right wheel')

# Get pointer to the right wheel sensor.

rightWheelSensor = robot.getPositionSensor('right wheel sensor')
rightWheelSensor.enable(1)  # Refreshes the sensor every 1ms.

# Computing the distance travelled by the wheel in the straight and turning sections respectively.

straight_distance = 2000.0/97.5  # (2000*2pi)/(195*pi) radians for it to travel 2000 mm
rotational_distance = 165.0/195*2.81  # 165*pi/195 radians for the wheel to rotate 90 degrees 

''' As you can see, the rotational distance does not contain pi, but a value lower than pi. 
    That is because there appears to be a miscalculation on the part of the sensors, 
    or a misunderstanding of the way they work on my part '''

# Initializing the value of r with 0 in order to enter the first while loop.
r = 0

# Repeat the following 4 times (once for each side).
for i in range(1, 5):
    
    # Set the position of the wheels for the straight section. 

    leftWheel.setPosition(1000)
    rightWheel.setPosition(1000)
    
    # Telling the robot to go every 1 ms until the correct value for the sensor is reached, indicating the end of the line.

    while r <= i*straight_distance - (i-1)*rotational_distance:
        robot.step(1)
        r = float(rightWheelSensor.getValue())
        
    # Set the position of the wheels for the turning section.     
        
    leftWheel.setPosition(1000)
    rightWheel.setPosition(-1000)
        
    # Telling the robot to rotate every 1 ms until the correct value for the sensor is reached, indicating the end of the rotation.

    while r > i*straight_distance - i*rotational_distance:
        robot.step(1)
        r = float(rightWheelSensor.getValue())
    
    
# Stop the robot when path is completed, as the robot performance
# is only computed when the robot has stopped.

leftWheel.setVelocity(0)
rightWheel.setVelocity(0)
